Provider 접근 방법 :
 - context.watch() : notifyListeners() 호출시 위젯 갱신
 - context.read() : notifyListeners() 가 호출되어도 갱신하지 않음
 - context.select() : watch 와 동일하나, 특정 속성이 변경된 경우에만 갱신
 ----
 - Consumer() : watch 와 동일하나, 특정 위젯만 갱신
 - Selector() : select와 동일하나, 특정 위젯만 갱신
 
 기본적으로 context.watch() 와 context.read()를 많이 사용한다.

Provider 제공자 종류 :
 - ChangeNotifierProvider : 변경 사항을 알릴 필요가 있는 클래스에 사용한다.
   - Changenotifier 를 상속 받거나 Mixin 한 클래스만 등록가능하다.
   - notifyListeners() 를 호출하여 변경 사항이 있음을 알릴 수 있다.

 - Provider : 변경 사항을 알릴 필요가 없는 클래스에 사용한다.
   - 상태를 가지고 있지 않거나, 화면을 갱신할 필요가 없는 클래스들은 Provider 로 등록한다. 
   - BuildContext 를 이용해 쉽게 접근할 수 있으며, 하나의 인스턴스만 생성하여 여러곳에서 활용이 가능하다.

그 외에도 다양한 제공자가 존재하지만, ChangeNotifierProvider & Provider 를 가장 많이쓰고, 이 둘만 활용하더라도 대부분 상황에 대처가 가능하다.

Provider 상호 작용 :
 - 특정 Provider의 상태가 변경될 때, 다른 Provider의 상태도 함께 변경 되어야하는 경우가 있다.
 - .addListener 를 이용해 연동이 가능하며, addListener()로 전달한 함수를 removeListener() 에 전달하여 등록을 해제해야한다.
   해제하지 않으면 메모리 누수가 발생할 수 있다.
 - 위젯 트리에 등록할 때, context.read()로 다른 Provider를 전달해주면 된다. 타입 추론이 가능하기 때문에 
   context.read<T>()라고 명시하지 않아도 된다.
 - 제공자 중에 ProxyProvider를 이용하는 방법도 있으나, 위 방법으로 대체 가능합니다.

StatefulWidget 생애 주기 활용 :
 - `initState()`에서 Provider에 접근하려면 **StatefulWidget**의 속성에서 Provider를 생성해야 한다.
 - `ChangeNotifierProvider`로 Provider를 등록하면 해당 **StatefulWidget**이 위젯 트리에서 제거될 때 함께 `dispose()` 된다.
 - ChangeNotifierProvider.value로 Provider를 전달하면 해당 StatefulWidget이 위젯 트리에서 제거되어도 dispose()가 호출되지 않는다.
 - `value`는 `build()` 호출시 계속 실행되므로, 여기에서 Provider의 생성자를 호출하면 안 된다.
 - 부모 위젯이 제거되어도 Provider의 `dispose()` 메소드가 호출되지 않는다.