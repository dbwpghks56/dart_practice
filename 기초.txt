Dart 는 기본적으로 주소값을 비교한다.

가변 객체 ( Mutable Object )는 항상 새 메모리를 할당,
불변 객체 ( Immutable Object ) 는 값이 동일하다면 기존에 생성한 객체를 재활용한다.

가변 객체를 const 를 이용하여 선언할 경우 불변 객체가 된다.
커스텀 class 의 경우 모든 속성값이 final 로 선언되어야 불변 객체로 생성할 수 있게 된다.

const 는 컴파일 타임에 고정 값인 객체 앞에만 선언할 수 있다.
- 런타임 : 앱을 실행하고 있는 시점
- 컴파일 타임 : 앱 실행 전 소스 코드를 기계어로 변환하는 시점

Flutter 에서 값이 변경되지 않는 위젯은 const 키워드를 붙여서 불변 객체로 생성하는 것이 좋다.
- 값이 동일한 객체들을 중복 생성하지 않아 메모리 절약
- 한 번 화면에 그린 뒤 갱신할 필요가 없어 불필요한 랜더링 최소화

일반적으로 Command Line Application 으로 만든 Dart 프로젝트는 lib 폴더 밑에 소스 코드를 넣고, bin 폴더 밑에 프로그램 시작 파일을 둔다.

Dart의 모든 클래스는 Object 클래스를 부모로 상속 받고 있다.

얕은 복사 ( Shallow Copy ) : 참조(메모리 주소)만 전달(복사)하는 것을 의미한다.
깊은 복사 ( Deep Copy ) : 값이 동일한 객체를 새 걸로 생성한다.
전체 값을 새로운 메모리에 할당하는 깊은 복사는 데이터 구조에 따라 구현 방법이 다르다.

Map : ... 전개 연산자를 이용해서 깊은 복사를 진행한다.
List : .toList(), ... 등을 이용해서 깊은 복사 가능

2차원 배열을 깊은 복사 하려는 경우, 내부 객체를 별도로 복사해야 한다.
보통 List의 .map 함수를 이용해서 깊은 복사를 진행한다. map 함수의 경우 Iterable 을 반환하여 .toList 로 List화 해야된다.

List : Iterable 의 하위 클래스로 배열의 모든 원소를 메모리에 올려두고 사용한다.
Iterable : 순차적으로 접근 가능한 요소의 모음으로, 접근하는 요소만 메모리에 올린다.

얕은 복사를 사용하면 메모리를 절약할 수 있지만, 데이터가 의도치 않게 변경될 수 있다.
객체 수정이 발생하지 않는다면, 얕은 복사를 사용하여 메모리 절약
객체 수정이 발생한다면, 깊은 복사를 이용하여 의도치 않은 변경을 방지

불변 객체를 활용하면
 - 개발자의 지식 수준과 관련없이 상황에 적절한 코드를 작성하도록 강제
 - 얕은 복사와 깊은 복사의 장점을 모두 누릴 수 있다.
 - 값 비교 구현시 hashcode 변경을 방지할 수 있다.

불변 객체 특징
 - 동일한 메모리에서 값 수정 불가능
    - 데이터의 원치 않는 변경으로부터 안전
    - 얕은 복사 활용가능 ( 메모리 절약 )
    - 멀티 스레드 환경에서 유용

 - 수정 대신 새 인스턴스 생성
 - 가변 객체에 비해 코드가 길고, 연산량이 많음