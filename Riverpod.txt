Riverpod : Provider 를 개선한 패키지
 - 제공자 등록 편의성 :
   - Provider는 위젯 트리에 직접 명시적으로 등록을 해야하며, 의존성이 있는 경우 등록 순서에 주의해야한다.
   - Riverpod 은 제공자를 전역 변수로 선언하며, ProviderScope로 감싸면 의존성 순서에 강관없이 등록된다.

 - 제한 없는 Provider :
   - Provider는 같은 클래스를 여러개 등록하는 경우, 가까운 클래스가 호출된다.
   - Riverpod 은 같은 클래스도 다른 이름으로 생성하고 접근할 수 있다.

 - Flutter에 의존하지 않음 :
   - Provider는 Flutter 프레임워크에서 제공하는 BuildContext를 사용한다.
   - Riverpod은 Flutter 프레임워크와 무관한 WidgetRef를 별도로 만들어 사용한다.


Riverpod 초기 설정 :
 - `ProviderScope`로 자동 등록 & 전역 변수로 생성
 - `state`의 참조(메모리 주소)가 바뀐 경우 변경 알림
 - `state` 속성 하나로 사용(하나 이상의 값은 별도 클래스 생성)
 - Provider에선 `BuildContext`를 사용했지만, Riverpod은 `WidgetRef`라는 고유의 방법을 사용합니다.
 - `context.watch()` 대신 `ref.watch()` 사용
 - `context.read()` 대신 `ref.read()` 사용

Riverpod 접근 방법 :
 - Riverpod은 `WidgetRef`를 이용해 접근할 수 있습니다.
   - `ref.watch()` : 상태 변경시 갱신
   - `ref.read()` : 갱신 없이 단순 접근

 - `WidgetRef`를 가져오는 방법을 배워봅시다.
   - StatelessWidget
     - `StatelessWidget`을 `ConsumerWidget`으로 변경
     - `build()` 메소드에 두 번째 파라미터로 `WidgetRef ref` 추가
   - StatefulWidget
     - `StatefulWidget`을 `ConsumerStatefulWidget`으로 변경
     - `State`를 `ConsumerState`로 변경
     - `build()` 메소드는 수정할 필요 없이 바로 `ref`라는 이름으로 WidgetRef를 사용할 수 있습니다.
   - Consumer ( https://dartpad.dev/?id=b864e372ab253e8c37092b46014fdd5f )
     - `Consumer`를 사용하면 `StatelessWidget` & `StatefulWidget`을 변경하지 않아도 됩니다.
     - Provider에서 사용한 `Consumer`와 같이 원하는 위젯을 감싸면 `builder`의 두 번째 파라미터로 `WidgetRef`가 전달 됩니다.

Riverpod 제공자 종류 :
 - StateProvider : 클래스 없이 가볍게 사용
   - 별도 클래스를 만들지 않고 바로 쓸 수 있습니다.
   - 상태 변경 코드가 외부에 있습니다.
   - 규모가 커져 외부 상태 변경 로직들이 많아지면 유지 보수에 좋지 않습니다.
   - 규모가 커지는 경우, `NotifierProvider`를 사용하게 좋습니다.

 - StateNotifierProvider : 클래스를 만들어 사용 ( 레거시 )
   - Riverpod 2.0 이전에 사용하던 방법( 레거시 )
   - 공식 문서에서 `NotifierProvider` 사용 권장

 - ChangeNotifierProvider : Provider 패키지와 호환되는 방법 ( 레거시 )
   - NotifierProvider 사용 권장

 - NotifierProvider : 클래스를 만들어 사용 ( Riverpod 2.0 권장 )
   - Riverpod 2.0 이상 버전에서 권장되는 사용되는 방법입니다.
   - `Notifier`를 상속 받은 클래스만 `NotifierProvider`에 등록 가능합니다.
   - 중앙 집중식으로 모든 로직을 관리하므로 유지 관리에 좋습니다.
   - `state`의 참조(메모리 주소)가 바뀌는 경우 변경 사항을 알립니다.

 - Provider : 수신측에 변경 사항을 알리지 않음
   - 상태 변경을 알릴 필요가 없거나, 상태가 없는 클래스들을 Provider로 등록하여 사용할 수 있습니다. (API 호출 클래스, Repository 등..)
   - `WidgetRef`를 이용해 쉽게 접근할 수 있으며, 하나의 인스턴스만 생성하여 여러곳에서 활용 가능합니다.

 NotifierProvider & Provider 만 알아도 대부분의 상황을 대처할 수 있다.